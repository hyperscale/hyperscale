/// KEYWORD(kw)
///   Expands by default for every Swift keyword and every SIL keyword, such as
///   'if', 'else', 'sil_global', etc. If you only want to use Swift keywords
///   see HYPERSCALE_KEYWORD.
#ifndef KEYWORD
#define KEYWORD(kw)
#endif

/// HYPERSCALE_KEYWORD(kw)
///   Expands for every Swift keyword.
#ifndef HYPERSCALE_KEYWORD
#define HYPERSCALE_KEYWORD(kw) KEYWORD(kw)
#endif

/// DECL_KEYWORD(kw)
///   Expands for every Swift keyword that can be used in a declaration.
#ifndef DECL_KEYWORD
#define DECL_KEYWORD(kw) HYPERSCALE_KEYWORD(kw)
#endif

/// STMT_KEYWORD(kw)
///   Expands for every Swift keyword used in statement grammar.
#ifndef STMT_KEYWORD
#define STMT_KEYWORD(kw) HYPERSCALE_KEYWORD(kw)
#endif

/// EXPR_KEYWORD(kw)
///   Expands for every Swift keyword used in an expression, such as 'true',
///   'false', and 'as'
#ifndef EXPR_KEYWORD
#define EXPR_KEYWORD(kw) HYPERSCALE_KEYWORD(kw)
#endif

/// PAT_KEYWORD(kw)
///   Expands for every Swift keyword used in a pattern, which is currently
///   limited to '_'
#ifndef PAT_KEYWORD
#define PAT_KEYWORD(kw) HYPERSCALE_KEYWORD(kw)
#endif

/// SIL_KEYWORD(kw)
///   Expands for every SIL keyword. These are only keywords when parsing SIL.
#ifndef SIL_KEYWORD
#define SIL_KEYWORD(kw) KEYWORD(kw)
#endif

/// POUND_KEYWORD(kw)
///   Every keyword prefixed with a '#'.
#ifndef POUND_KEYWORD
#define POUND_KEYWORD(kw)
#endif

/// POUND_OBJECT_LITERAL(kw, desc, proto)
///   Every keyword prefixed with a '#' representing an object literal.
#ifndef POUND_OBJECT_LITERAL
#define POUND_OBJECT_LITERAL(kw, desc, proto) POUND_KEYWORD(kw)
#endif

/// POUND_OLD_OBJECT_LITERAL(kw, new_kw, old_arg, new_arg)
///   Every keyword prefixed with a '#' representing the obsoleted form of an
///   object literal.
#ifndef POUND_OLD_OBJECT_LITERAL
#define POUND_OLD_OBJECT_LITERAL(kw, new_kw, old_arg, new_arg) POUND_KEYWORD(kw)
#endif

/// POUND_CONFIG(kw)
///   Every keyword prefixed with a '#' representing a configuration.
#ifndef POUND_CONFIG
#define POUND_CONFIG(kw) POUND_KEYWORD(kw)
#endif

/// PUNCTUATOR(name, str)
///   Expands for every Swift punctuator.
///   \param name  The symbolic name of the punctuator, such as
///                'l_paren' or 'arrow'.
///   \param str   A string literal containing the spelling of the punctuator,
///                such as '"("' or '"->"'.
#ifndef PUNCTUATOR
#define PUNCTUATOR(name, str)
#endif

// Keywords that start decls.
DECL_KEYWORD(AssociatedType)
DECL_KEYWORD(Class)
DECL_KEYWORD(Deinit)
DECL_KEYWORD(Enum)
DECL_KEYWORD(Extension)
DECL_KEYWORD(Func)
DECL_KEYWORD(Import)
DECL_KEYWORD(Init)
DECL_KEYWORD(Inout)
DECL_KEYWORD(Let)
DECL_KEYWORD(Operator)
DECL_KEYWORD(PrecedenceGroup)
DECL_KEYWORD(Interface)
DECL_KEYWORD(Struct)
DECL_KEYWORD(SubScript)
DECL_KEYWORD(TypeAlias)
DECL_KEYWORD(Var)

DECL_KEYWORD(FilePrivate)
DECL_KEYWORD(Internal)
DECL_KEYWORD(Private)
DECL_KEYWORD(Public)
DECL_KEYWORD(Static)

SIL_KEYWORD(undef)

// Statement keywords.
STMT_KEYWORD(defer)
STMT_KEYWORD(if)
STMT_KEYWORD(guard)
STMT_KEYWORD(do)
STMT_KEYWORD(repeat)
STMT_KEYWORD(else)
STMT_KEYWORD(for)
STMT_KEYWORD(in)
STMT_KEYWORD(while)
STMT_KEYWORD(Return)
STMT_KEYWORD(break)
STMT_KEYWORD(continue)
STMT_KEYWORD(fallthrough)
STMT_KEYWORD(switch)
STMT_KEYWORD(case)
STMT_KEYWORD(default)
STMT_KEYWORD(where)
STMT_KEYWORD(catch)

// Expression keywords.
EXPR_KEYWORD(as)
EXPR_KEYWORD(Any)
EXPR_KEYWORD(false)
EXPR_KEYWORD(is)
EXPR_KEYWORD(nil)
EXPR_KEYWORD(rethrows)
EXPR_KEYWORD(super)
EXPR_KEYWORD(self)
EXPR_KEYWORD(Self)
EXPR_KEYWORD(throw)
EXPR_KEYWORD(true)
EXPR_KEYWORD(try)
EXPR_KEYWORD(throws)
KEYWORD(__FILE__)
KEYWORD(__LINE__)
KEYWORD(__COLUMN__)
KEYWORD(__FUNCTION__)
KEYWORD(__DSO_HANDLE__)

// Pattern keywords.
PAT_KEYWORD(_)

// Punctuators.
PUNCTUATOR(OpenParen,       "(")
PUNCTUATOR(CloseParen,      ")")
PUNCTUATOR(OpenBrace,       "{")
PUNCTUATOR(CloseBrace,      "}")
PUNCTUATOR(OpenBracket,     "[")
PUNCTUATOR(CloseBracket,    "]")
PUNCTUATOR(Less,            "<")
PUNCTUATOR(Greater,         ">")

PUNCTUATOR(Period,        ".")
PUNCTUATOR(PeriodPrefix,  ".")
PUNCTUATOR(Comma,         ",")
PUNCTUATOR(Colon,         ":")
PUNCTUATOR(Semi,          ";")
PUNCTUATOR(Equal,         "=")
PUNCTUATOR(AtSign,        "@")
PUNCTUATOR(Pound,         "#")

PUNCTUATOR(AmpPrefix,     "&")
PUNCTUATOR(Arrow,         "->")

PUNCTUATOR(Backtick,      "`")

PUNCTUATOR(Backslash, "\\")

PUNCTUATOR(ExclaimPostfix, "!") // if left-bound

PUNCTUATOR(QuestionPostfix, "?") // if left-bound
PUNCTUATOR(QuestionInfix, "?")    // if not left-bound

// Keywords prefixed with a '#'.  "if" becomes "tok::pound_if".
POUND_KEYWORD(if)
POUND_KEYWORD(else)
POUND_KEYWORD(elseif)
POUND_KEYWORD(endif)
POUND_KEYWORD(keyPath)
POUND_KEYWORD(line)
POUND_KEYWORD(sourceLocation)
POUND_KEYWORD(selector)

// Keywords prefixed with a '#' that are build configurations.
POUND_CONFIG(available)


// Object literals and their corresponding protocols.
POUND_OBJECT_LITERAL(fileLiteral, "file reference", ExpressibleByFileReferenceLiteral)
POUND_OBJECT_LITERAL(imageLiteral, "image", ExpressibleByImageLiteral)
POUND_OBJECT_LITERAL(colorLiteral, "color", ExpressibleByColorLiteral)

POUND_OLD_OBJECT_LITERAL(FileReference, fileLiteral, fileReferenceLiteral, resourceName)
POUND_OLD_OBJECT_LITERAL(Image, imageLiteral, imageLiteral, resourceName)
POUND_OLD_OBJECT_LITERAL(Color, colorLiteral, colorLiteralRed, red)

POUND_KEYWORD(file)
POUND_KEYWORD(column)
POUND_KEYWORD(function)
POUND_KEYWORD(dsohandle)


#undef KEYWORD
#undef HYPERSCALE_KEYWORD
#undef DECL_KEYWORD
#undef STMT_KEYWORD
#undef EXPR_KEYWORD
#undef PAT_KEYWORD
#undef SIL_KEYWORD
#undef POUND_KEYWORD
#undef POUND_OBJECT_LITERAL
#undef POUND_OLD_OBJECT_LITERAL
#undef POUND_CONFIG
#undef PUNCTUATOR
